pipeline {
  agent {
    docker {
      image 'thiliniherath/maven-docker-agent:v1'
      // mount Docker socket to access the host's Docker daemon
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' 
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-thilini/CICD-Project.git'
      }
    }
    stage('Build and Test') {
  steps {
    script {
      try {
        // List contents of the current directory for debugging
        sh 'ls -ltr'

        // Change directory to the Maven project and run the build
        sh '''
          cd spring-boot-app
          mvn clean package
        '''
      } catch (Exception e) {
        // If an error occurs, print a message and fail the build
        echo "Build and Test stage failed: ${e.message}"
        error "Stopping the pipeline due to build failure"
      }
    }
  }
}

    stage('Static Code Analysis') {
      environment {
        // URL of the SonarQube server
        SONAR_URL = "http://:9000"   //54.221.76.9
      }
      steps {
        // Inject the SonarQube authentication token from Jenkins credentials
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          // Navigate to the Maven project directory and run the SonarQube analysis
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        // Define the Docker image name and tag using the build number
        DOCKER_IMAGE = "thiliniherath/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        // Define the credentials for the Docker registry
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            // Navigate to the project directory and build the Docker image
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            // Define the Docker image object
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            // Authenticate with the Docker registry and push the image
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            // Name of the GitHub repository
            GIT_REPO_NAME = "CICD-Project"
            // GitHub username
            GIT_USER_NAME = "iam-thilini"
        }
        steps {
            // Inject the GitHub authentication token from Jenkins credentials
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "thiliniherath109@gmail.com" 
                    git config user.name "Thilini Herath"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
